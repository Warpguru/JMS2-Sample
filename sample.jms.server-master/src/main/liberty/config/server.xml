<?xml version="1.0" encoding="UTF-8"?>
<server description="Sample JMS Server - Server">

	<featureManager>
		<feature>adminCenter-1.0</feature>
		<feature>jsp-2.3</feature>
		<feature>wasJmsClient-2.0</feature>
		<feature>wasJmsServer-1.0</feature>
		<feature>mdb-3.2</feature>
	</featureManager>

	<httpEndpoint id="defaultHttpEndpoint" host="localhost" httpPort="9124" httpsPort="9125">
	</httpEndpoint>

	<!-- Define admin user -->
	<basicRegistry id="basic">
		<user name="admin" password="adminpwd" />
	</basicRegistry>
	<!-- A user with the administrator-role has full access to the Admin Center -->
	<administrator-role>
		<user>admin</user>
	</administrator-role>
	<!-- Allow configuration changes -->
	<remoteFileAccess>
		<writeDir>${server.config.dir}</writeDir>
	</remoteFileAccess>
	<!-- To protect keystore files that have server authentication credentials, 
		define a keystore and assign it a password -->
	<keyStore id="defaultKeyStore" password="Liberty" />

	<!-- By default messaging engine listens on port 7276 (unsecured) and 7286 
		(secured) for incoming data from JMS clients. If you want to bind the messaging 
		engine to a different port, you must use the <wasJmsEndpoint> element. -->
	<wasJmsEndpoint id="InboundJmsCommsEndpoint" wasJmsPort="9126" wasJmsSSLPort="9127" />

	<!-- A messaging engine is a component, running inside a server, that manages 
		messaging resources. Applications are connected to a messaging engine when 
		they send and receive messages. When wasJmsServer-1.0 feature is added in 
		server.xml by default a messaging engine runtime is initialized which contains 
		a default queue(Default.Queue) and a default topic space(Default.Topic.Space). 
		If the user wants to create a new queue or topic space then the messagingEngine 
		element must be defined in server.xml -->
	<messagingEngine>
		<queue id="QUEUE1" />
		<queue id="MDBREPLYQ" />
		<queue id="MDBQ" />
	</messagingEngine>

	<!-- Each of the connection factory is associated with a connection pool. 
		A connection pool holds similar connections created for a specific connection 
		factory. connectionManager element enables users to define the pool size 
		for each of the associated connection factory. Refer to the connectionManagerRef 
		attribute in the connection factory configuration. -->
	<connectionManager id="ConMgr" maxPoolSize="5" minPoolSize="2" />

	<!-- Defines a JMS connection factory configuration. JMS applications can 
		lookup this connection factory to establishing connection to the messaging 
		engine running within the same liberty profile as that of the application. -->
	<jmsConnectionFactory id="QM" jndiName="jms/qm"	connectionManagerRef="ConMgr">
		<properties.wasJms />
	</jmsConnectionFactory>

	<!-- Liberty profile supports configuring and deploying MDB's for asynchronous 
		consumption of messages from Liberty messaging. As per JCA specification, 
		MDB's make use of Activation Specifications to interact with Liberty Messaging. 
		Defines a JMS activation specification configuration, The ID value must be 
		in the format of application name/module name/bean name where Application 
		name is the name of the application that is deployed (for example, JMSSample) 
		and the application name applies only if the bean is packaged within an EAR 
		file. Bean name is the ejb-name of the enterprise bean. Module name is the 
		name of the module in which the bean is packaged. Define the destinationRef 
		pointing to a valid jmsQueue ID. -->
	<jmsActivationSpec id="jms2-JMSSample-Server/SampleMDB">
		<properties.wasJms destinationRef="jms/MDBQ" />
	</jmsActivationSpec>

	<!-- Defines the JMS topic configuration. jmsTopic element defines properties 
		that enables JMS application to publish or subscribe for messages to a particular 
		topic under a topic space. -->
	<jmsTopic id="jms/jmsTopic" jndiName="jms/jmsTopic">
		<properties.wasJms topicName="SPORTS" />
	</jmsTopic>

	<!-- Defines the JMS Queue configuration. jmsQueue element defines properties 
		that enables JMS application to produce or consume messages from a particular 
		queue, in this case the application connects to a queue "QUEUE1" defined 
		in the messagingEngine element. -->
	<jmsQueue id="jms/INPUT_Q" jndiName="jms/INPUT_Q">
		<properties.wasJms queueName="QUEUE1" />
	</jmsQueue>

	<jmsQueue id="jms/MDBREPLYQ" jndiName="jms/MDBREPLYQ">
		<properties.wasJms queueName="MDBREPLYQ" />
	</jmsQueue>

	<jmsQueue id="jms/MDBQ" jndiName="jms/MDBQ">
		<properties.wasJms queueName="MDBQ" />
	</jmsQueue>

	<webApplication contextRoot="/jms2-JMSSample" location="jms2-JMSSample-Server.war" />
	
</server>
