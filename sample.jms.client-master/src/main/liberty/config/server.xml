<?xml version="1.0" encoding="UTF-8"?>
<server description="Sample JMS Server - Client">

	<featureManager>
		<feature>adminCenter-1.0</feature>
		<feature>jsp-2.3</feature>
		<feature>wasJmsClient-2.0</feature>
		<feature>mdb-3.2</feature>
	</featureManager>

	<httpEndpoint id="defaultHttpEndpoint" host="localhost" httpPort="9128" httpsPort="9129">
	</httpEndpoint>

	<!-- Define admin user -->
	<basicRegistry id="basic">
		<user name="admin" password="adminpwd" />
	</basicRegistry>
	<!-- A user with the administrator-role has full access to the Admin Center -->
	<administrator-role>
		<user>admin</user>
	</administrator-role>
	<!-- Allow configuration changes -->
	<remoteFileAccess>
		<writeDir>${server.config.dir}</writeDir>
	</remoteFileAccess>
	<!-- To protect keystore files that have server authentication credentials, 
		define a keystore and assign it a password -->
	<keyStore id="defaultKeyStore" password="Liberty" />

	<!-- Each of the connection factory is associated with a connection pool. 
		A connection pool holds similar connections created for a specific connection 
		factory. connectionManager element enables users to define the pool size 
		for each of the associated connection factory. Refer to the connectionManagerRef 
		attribute in the connection factory configuration. -->
	<connectionManager id="ConMgr" maxPoolSize="5" minPoolSize="2" />

	<!-- Defines a JMS connection factory configuration. JMS applications can 
		lookup this connection factory to establishing connection to the messaging 
		provider using the factory defined values. Define a connection factory that 
		the sample application uses to connect to the liberty messaging running within 
		the same Liberty profile as that of the application. -->
	<jmsConnectionFactory id="QM" jndiName="jms/qm" connectionManagerRef="ConMgr">
		<properties.wasJms remoteServerAddress="localhost:9126:BootstrapBasicMessaging" />
	</jmsConnectionFactory>

	<!-- Liberty profile supports configuring and deploying MDB's for asynchronous 
		consumption of messages from Liberty messaging. As per JCA specification, 
		MDB's make use of Activation Specifications to interact with Liberty Messaging. 
		Defines a JMS activation specification configuration, The ID value must be 
		in the format of application name/module name/bean name where Application 
		name is the name of the application that is deployed (for example, JMSSample) 
		and the application name applies only if the bean is packaged within an EAR 
		file. Bean name is the ejb-name of the enterprise bean. Module name is the 
		name of the module in which the bean is packaged. Define the destinationRef 
		pointing to a valid jmsQueue ID. -->
	<jmsActivationSpec id="jms2-JMSSample-Client/SampleMDB">
		<properties.wasJms destinationRef="jms/MDBQ" remoteServerAddress="localhost:9126:BootstrapBasicMessaging" />
	</jmsActivationSpec>

	<!-- Defines the JMS topic configuration. jmsTopic element defines properties 
		that enables JMS application to publish or subscribe for messages to a particular 
		topic under a topic space. -->
	<jmsTopic id="jms/jmsTopic" jndiName="jms/jmsTopic">
		<properties.wasJms topicName="SPORTS" />
	</jmsTopic>

	<!-- Defines the JMS Queue configuration. jmsQueue element defines properties 
		that enables JMS application to produce or consume messages from a particular 
		queue, in this case the application connects to a queue "QUEUE1" defined 
		in the messagingEngine element. -->
	<jmsQueue id="jms/INPUT_Q" jndiName="jms/INPUT_Q">
		<properties.wasJms queueName="QUEUE1" />
	</jmsQueue>

	<jmsQueue id="jms/MDBREPLYQ" jndiName="jms/MDBREPLYQ">
		<properties.wasJms queueName="MDBREPLYQ" />
	</jmsQueue>

	<jmsQueue id="jms/MDBQ" jndiName="jms/MDBQ">
		<properties.wasJms queueName="MDBQ" />
	</jmsQueue>

	<webApplication contextRoot="/jms2-JMSSample" location="jms2-JMSSample-Client.war" />
	
</server>
